/*
 * File: app/controller/Camera.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('IrdaEval.controller.Camera', {
    extend: 'Ext.app.Controller',
    config: {
        views: [
            'CameraView'
        ],

        refs: {
            cameraButton: '#cameraBtn',
            photoView: '#photoContainer'
        },

        control: {
            "#cameraBtn": {
                tap: 'onButtonTap'
            }
        }
    },

    onButtonTap: function(button, e, options) {
        console.log('Camera button press!');
        var me = this;
        // Take picture using device camera and retrieve image as base64-encoded string
        try {
            console.log("inside try capture photo");
            var pictureSource=navigator.camera.PictureSourceType;
            var destinationType=navigator.camera.DestinationType;
            //navigator.camera.getPicture(this.onPhotoURISuccess, this.onFail, { quality: 50,
            //destinationType: destinationType.FILE_URI });
            navigator.camera.getPicture(me.onPhotoURISuccess,null,{sourceType:1,quality:60});

        }
        catch (err)
        {
            alert(err);
        }

    },

    onFail: function(message) {
        alert('Failed: ' + message);

    },

    onPhotoURISuccess: function(imageURI) {
        // Uncomment to view the image file URI
        // console.log(imageURI);

        // Get image handle
        //

        var me = this;
        var view = me.getPhotoView();
        console.log("photo view = ", view);



        // Show the captured photo
        // The inline CSS rules are used to resize the image
        //
        //console.log("image uri = %s", imageURI);
        var img = Ext.create('Ext.Img', {
            src: "data:image/jpeg;base64," + imageURI,
            height: 64,
            width: 64
        });


        view.add(img);


    }

});